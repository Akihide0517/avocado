func convolutionFFTBlockMulti(signal1: [Float], signal2: [Float], blockSize: Int) -> [Float] {
        if(!overlapMode){
            // 入力信号とフィルタ信号を、複数のスレッドで処理できるように分割する。
            let signal1Blocks = stride(from: 0, to: signal1.count, by: blockSize).map { Array(signal1[$0 ..< min($0 + blockSize, signal1.count)]) }
            let signal2Blocks = stride(from: 0, to: signal2.count, by: blockSize).map { Array(signal2[$0 ..< min($0 + blockSize, signal2.count)]) }
            counter.text = "分割数 \(signal1Blocks.count) ： \(signal2Blocks.count)"
            
            // 各スレッドで、フーリエ変換とフーリエ逆変換を行う。
            var results = [Float](repeating: 0.0, count: signal1.count)
            let groups = DispatchGroup()
            
            if(threads == 0){
                threads = signal1Blocks.count
            }
            
            for i in 0 ..< threads {
                groups.enter()
                let block = (signal1Blocks[i], signal2Blocks[i])
                
                /* ↓↓DispatchQueueが不安定で、同時にresultにアクセスしてメモリーエラーを起こす問題があるので保留↓↓ */
                
                //DispatchQueue.global().async {
                // ブロックサイズごとにフーリエ変換された入力信号とフィルタ信号を乗算する。
                var productFFT = zip(self.fft(block.0), self.fft(block.1)).map { $0 * $1 }
                
                // ブロックサイズごとにフーリエ逆変換を行う。
                let blockResult = self.ifft(&productFFT)
                
                // ブロック結果を結合する。
                results += blockResult[0 ..< block.0.count]
                groups.leave()
                //}
            }
            groups.wait()
            
            // 出力信号を切り捨てる。
            return results
        }else{
            
            let fft1 = FFT(signal: signal1)
            let fft2 = FFT(signal: signal2)

            var convolutionSpectrum = [Complex64](repeating: Complex64(0.0, 0.0), count: fft1.count)

            for i in 0 ..< fft1.count {
                convolutionSpectrum[i] = Complex64(fft1[i].real * fft2[i].real, 0.0)
            }

            // Convert the array of complex numbers to an array of floats.
            let convolutionSpectrumReal = convolutionSpectrum.map { $0.real }

            let inverseFFT = FFT(signal: convolutionSpectrumReal)

            var convolutionResult = [Float](repeating: 0.0, count: inverseFFT.count)

            for i in 0 ..< convolutionResult.count {
                convolutionResult[i] = inverseFFT[i].real
            }

            return convolutionResult
        }
    }
    
    struct Complex64 {
        var real: Float
        var imag: Float

        init(_ r: Float, _ i: Float) {
            self.real = r
            self.imag = i
        }
    }

    func FFT(signal: [Float]) -> [Complex64] {
        let log2n = vDSP_Length(log2(Float(signal.count)) + 1)
        let fft = vDSP.FFT(log2n: log2n, radix: .radix2, ofType: DSPSplitComplex.self)!

        var inputReal = [Float](signal)
        var inputImag = [Float](repeating: 0.0, count: signal.count)
        var outputReal = [Float](repeating: 0.0, count: signal.count)
        var outputImag = [Float](repeating: 0.0, count: signal.count)

        inputReal.withUnsafeMutableBufferPointer { inputRealPtr in
            inputImag.withUnsafeMutableBufferPointer { inputImagPtr in
                outputReal.withUnsafeMutableBufferPointer { outputRealPtr in
                    outputImag.withUnsafeMutableBufferPointer { outputImagPtr in
                        let input = DSPSplitComplex(realp: inputRealPtr.baseAddress!, imagp: inputImagPtr.baseAddress!)
                        var output = DSPSplitComplex(realp: outputRealPtr.baseAddress!, imagp: outputImagPtr.baseAddress!)

                        fft.forward(input: input, output: &output)
                    }
                }
            }
        }

        var spectrum = [Complex64](repeating: Complex64(0.0, 0.0), count: signal.count)

        for i in 0 ..< signal.count {
            spectrum[i].real = outputReal[i]
            spectrum[i].imag = outputImag[i]
        }

        return spectrum
    }
    
    func ifft(_ x: inout [Float]) -> [Float] {
        // 入力信号のサイズが2の累乗でない場合、補充を行う。
        var n = x.count
        var even = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))
        var odd = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))

        while n % 2 != 0 {
            x.append(0.0)
            n += 1
        }

        // 偶数番目の要素のFFTを計算する。
        for i in 0 ..< even.count {
            even[i] = x[2 * i]
        }
        even = fft(even)

        // 奇数番目の要素のFFTを計算する。
        for i in 0 ..< odd.count {
            odd[i] = x[2 * i + 1]
        }
        odd = fft(odd)

        // 偶数番目の要素と奇数番目の要素を組み合わせて、出力信号を生成する。
        var result = [Float](repeating: 0.0, count: n)
        for k in 0 ..< n / 2 {
            let k0 = 2 * k
            let k1 = 2 * k + 1
            let w_k = cos(-2 * .pi * Float(k) / Float(n)) - sin(-2 * .pi * Float(k) / Float(n))
            result[k0] = even[k] + odd[k] * w_k
            result[k1] = even[k] - odd[k] * w_k
        }

        return result
    }
    
    func fft(_ x: [Float]) -> [Float] {
            // 入力信号のサイズが2の累乗でない場合、補充を行う。
            let n = x.count
            if n == 1 {
                return x
            }
            var even = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))
            var odd = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))

            
            // 偶数番目の要素のFFTを計算する。
            for i in 0 ..< even.count {
                even[i] = x[2 * i]
            }
            even = fft(even)
            
            // 奇数番目の要素のFFTを計算する。
            for i in 0 ..< odd.count {
                odd[i] = x[2 * i + 1]
            }
            odd = fft(odd)
            
            // 偶数番目の要素と奇数番目の要素を組み合わせて、出力信号を生成する。
            var result = [Float](repeating: 0.0, count: n)
            for k in 0 ..< n / 2 {
                let k0 = 2 * k
                let k1 = 2 * k + 1
                let w_k = cos(-2 * .pi * Float(k) / Float(n)) - sin(-2 * .pi * Float(k) / Float(n))
                result[k0] = even[k] + odd[k] * w_k
                result[k1] = even[k] - odd[k] * w_k
            }
            
            return result
        }
    
    func convolution(signal1: [Float], signal2: [Float], blockSize: Int) -> [Float] {
        let m = signal1.count
        let n = signal2.count
        let outputLength = m + n - 1
        
        var result = [Float](repeating: 0.0, count: outputLength)
        var signal1Padded = signal1 + [Float](repeating: 0.0, count: outputLength - m)

        var i = 0
        while i < n {
            let blockEnd = min(i + blockSize, n)
            let currentBlockSize = blockEnd - i
            let signal2Block = Array(signal2[i..<i + currentBlockSize])

            // Perform convolution for the current block
            var blockResult = [Float](repeating: 0.0, count: outputLength)
            vDSP_conv(signal1Padded, 1, signal2Block, 1, &blockResult, 1, vDSP_Length(outputLength), vDSP_Length(currentBlockSize))

            // Add the block result to the overall result with overlap
            vDSP_vadd(result, 1, blockResult, 1, &result, 1, vDSP_Length(outputLength))

            i += currentBlockSize
            print("convolution end", i,":",n)
        }

        print("convolution() end", result.count)

        return result
    }

    func overlapAddConvolution(signal1: [Float], signal2: [Float], blockSize: Int) -> [Float] {
        let m = signal1.count
        let n = signal2.count
        let outputLength = m + n - 1

        var result = [Float](repeating: 0.0, count: outputLength)

        // 現在のブロックインデックス
        var index = 0

        while index < m {
            let blockEnd = min(index + blockSize, m)
            let currentBlockSize = blockEnd - index
            var block1 = Array(signal1[index..<index + currentBlockSize])

            // Apply convolution for the current block
            let blockResult = convolution(signal1: block1, signal2: signal2, blockSize: 850)

            // Add the block result to the overall result with overlap
            for j in 0..<currentBlockSize {
                result[index + j] += blockResult[j]
            }

            index += currentBlockSize
            print("block end", index,":",m)
        }

        // Trim the result to the original output length
        let trimmedResult = Array(result.prefix(outputLength))
        print("overlapAddConvolution end", trimmedResult.count)

        return trimmedResult
    }
    
    func inverseConvolution(signal: [Float], kernel: [Float]) -> [Float] {
        let signalLength = signal.count
        let kernelLength = kernel.count
        let outputLength = signalLength + kernelLength - 1
        
        var result = [Float](repeating: 0.0, count: outputLength)
        
        // Apply inverse convolution using Fourier transform
        vDSP_conv(signal, 1, kernel, 1, &result, 1, vDSP_Length(outputLength), vDSP_Length(kernelLength))
        print("inverseConvolution end",result.count)
        
        return result
    }

    //掛け算
    func elementwiseMultiplication(_ array1: [CGFloat], _ array2: [CGFloat]) -> [CGFloat] {
        // 2つの配列の要素数が異なる場合はエラーを処理する必要があります
        guard array1.count == array2.count else {
            fatalError("配列の長さが一致しません")
        }
        
        var result = [CGFloat]()
        
        for i in 0..<array1.count {
            let product = array1[i] * array2[i]
            result.append(product)
        }
        
        return result
    }
    
