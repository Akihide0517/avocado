//
//  FFTController.swift
//  audioavocado -Test
//
//  Created by 吉田成秀 on 2023/10/19.
//

import Foundation
import UIKit
import Accelerate
import DGCharts
import Dispatch
import simd
import TensorSwift

class FFTController: UIViewController {
    var chartView: LineChartView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("opend!")
        
        // Create the LineChartView
        chartView = LineChartView()
        chartView.frame = CGRect(x: 20, y: 20, width: 300, height: 200) // Set frame as needed
        view.addSubview(chartView)
        print("Create the LineChartView end")
        
        if(wave.count <= 0){
            wave = [1,1,1,1,1,1,1,1,1,1,1]
            reversewave = [2,2,2,2,2,2,2,2,2,2,2]
        }
        
        if(Level == false){
            // 畳み込まれた結果のデータ
            print("wave:",wave.count)
            var convolutionResult = (overlapAddConvolution(signal1: wave.map { Float($0) }, signal2: reversewave.map { Float($0) }, blockSize: 850))
            
            if(graphMode){
                let graphView = GraphView()
                graphView.dataPoints = convolutionResult.map { CGFloat(Float($0)) }
                view.addSubview(graphView)
                // グラフの位置やサイズを調整（Auto Layoutを使用する場合）
                graphView.translatesAutoresizingMaskIntoConstraints = false
                NSLayoutConstraint.activate([
                    graphView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                    graphView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
                    graphView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                    graphView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.3) // グラフの高さを設定
                ])
            }
            
            convolutionResult = inverseConvolution(signal: convolutionResult, kernel: reversewave.map { Float($0) })
            print("convolution end",convolutionResult.count)
            
            if(!graphMode){
                let graphView = GraphView()
                graphView.dataPoints = convolutionResult.map { CGFloat(Float($0)) }
                view.addSubview(graphView)
                // グラフの位置やサイズを調整（Auto Layoutを使用する場合）
                graphView.translatesAutoresizingMaskIntoConstraints = false
                NSLayoutConstraint.activate([
                    graphView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                    graphView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
                    graphView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                    graphView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.3) // グラフの高さを設定
                ])
            }
            
            // ピークの位置を見つける
            let peakIndices = findPeaks(convolutionResult.map { CGFloat($0) })!
            print("peakIndices end",peakIndices)
            
            // ピークを中心にデータポイントを取り出しFFT（48000個）
            if(!peakMode){
                var extractedData = extractDataAroundPeaks(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                if(peakDir){
                    extractedData = extractDataAfterPeak2(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                }
                print("extractedData end",extractedData)
                
                let fftResult = performFFT(on: extractedData)
                print("fftResult end")
                
                // Prepare data for the chart
                var entries: [ChartDataEntry] = []
                for (index, magnitude) in fftResult.enumerated() {
                    let entry = ChartDataEntry(x: Double(index), y: magnitude)
                    entries.append(entry)
                }
                print("Prepare data for the chart end")
                
                // Create a data set and a data object for the chart
                let dataSet = LineChartDataSet(entries: entries, label: "FFT Magnitudes")
                let data = LineChartData(dataSet: dataSet)
                
                // Customize the chart appearance (optional)
                chartView.xAxis.labelPosition = .bottom
                chartView.rightAxis.enabled = false
                dataSet.drawCirclesEnabled = false
                
                // Set the data for the chart
                chartView.data = data
                print("all opend!")
            }else{
                var extractedData = extractDataAfterPeak(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                if(peakDir){
                    extractedData = extractDataAfterPeak2(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                }
                print("extractedData end",extractedData)
                
                let fftResult = performFFT(on: extractedData)
                print("fftResult end")
                
                // Prepare data for the chart
                var entries: [ChartDataEntry] = []
                for (index, magnitude) in fftResult.enumerated() {
                    let entry = ChartDataEntry(x: Double(index), y: magnitude)
                    entries.append(entry)
                }
                print("Prepare data for the chart end")
                
                // Create a data set and a data object for the chart
                let dataSet = LineChartDataSet(entries: entries, label: "FFT Magnitudes")
                let data = LineChartData(dataSet: dataSet)
                
                // Customize the chart appearance (optional)
                chartView.xAxis.labelPosition = .bottom
                chartView.rightAxis.enabled = false
                dataSet.drawCirclesEnabled = false
                
                // Set the data for the chart
                chartView.data = data
                print("all opend!")
            }
        }else{
                // 畳み込まれた結果のデータ
                print("wave:",wave.count,wave[100])
            var convolutionResult = (convolutionFFTBlockMulti(signal1: wave.map { Float($0) }, signal2: reversewave.map { Float($0) }, blockSize: 2, numThreads: 7000))
                
                if(graphMode){
                    let graphView = GraphView()
                    graphView.dataPoints = convolutionResult.map { CGFloat(Float($0)) }
                    view.addSubview(graphView)
                    // グラフの位置やサイズを調整（Auto Layoutを使用する場合）
                    graphView.translatesAutoresizingMaskIntoConstraints = false
                    NSLayoutConstraint.activate([
                        graphView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                        graphView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
                        graphView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                        graphView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.3) // グラフの高さを設定
                    ])
                }
            print("convolution end",convolutionResult.count,":",convolutionResult[100])
                
                // ピークの位置を見つける
                let peakIndices = findPeaks(convolutionResult.map { CGFloat($0) })!
                print("peakIndices end",peakIndices)
                
                // ピークを中心にデータポイントを取り出しFFT（48000個）
                if(!peakMode){
                    var extractedData = extractDataAroundPeaks(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                    if(peakDir){
                        extractedData = extractDataAfterPeak2(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                    }
                    print("extractedData end",extractedData)
                    
                    let fftResult = performFFT(on: extractedData)
                    print("fftResult end")
                    
                    // Prepare data for the chart
                    var entries: [ChartDataEntry] = []
                    for (index, magnitude) in fftResult.enumerated() {
                        let entry = ChartDataEntry(x: Double(index), y: magnitude)
                        entries.append(entry)
                    }
                    print("Prepare data for the chart end")
                    
                    // Create a data set and a data object for the chart
                    let dataSet = LineChartDataSet(entries: entries, label: "FFT Magnitudes")
                    let data = LineChartData(dataSet: dataSet)
                    
                    // Customize the chart appearance (optional)
                    chartView.xAxis.labelPosition = .bottom
                    chartView.rightAxis.enabled = false
                    dataSet.drawCirclesEnabled = false
                    
                    // Set the data for the chart
                    chartView.data = data
                    print("all opend!")
                }else{
                    var extractedData = extractDataAfterPeak(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                    if(peakDir){
                        extractedData = extractDataAfterPeak2(convolutionResult.map { CGFloat($0) }, peakIndex: peakIndices, dataPointsCount: 48000)
                    }
                    print("extractedData end",extractedData)
                    
                    let fftResult = performFFT(on: extractedData)
                    print("fftResult end")
                    
                    // Prepare data for the chart
                    var entries: [ChartDataEntry] = []
                    for (index, magnitude) in fftResult.enumerated() {
                        let entry = ChartDataEntry(x: Double(index), y: magnitude)
                        entries.append(entry)
                    }
                    print("Prepare data for the chart end")
                    
                    // Create a data set and a data object for the chart
                    let dataSet = LineChartDataSet(entries: entries, label: "FFT Magnitudes")
                    let data = LineChartData(dataSet: dataSet)
                    
                    // Customize the chart appearance (optional)
                    chartView.xAxis.labelPosition = .bottom
                    chartView.rightAxis.enabled = false
                    dataSet.drawCirclesEnabled = false
                    
                    // Set the data for the chart
                    chartView.data = data
                    print("all opend!")
                }
        }
        
        let currentDate = Date()  // 現在の日時を取得
        let dateFormatter = DateFormatter()

        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"  // 任意の日付/時間フォーマットを指定
        let formattedDate = dateFormatter.string(from: currentDate)

        print("現在の時刻は: \(formattedDate)")
    }
    
    
    
    //以下どちらが正解か不明なため二つ手段を書いておく
    func convolutionFFTBlockMulti(signal1: [Float], signal2: [Float], blockSize: Int, numThreads: Int) -> [Float] {
        // 入力信号とフィルタ信号を、複数のスレッドで処理できるように分割する。
        let signal1Blocks = stride(from: 0, to: signal1.count, by: blockSize).map { Array(signal1[$0 ..< min($0 + blockSize, signal1.count)]) }
        let signal2Blocks = stride(from: 0, to: signal2.count, by: blockSize).map { Array(signal2[$0 ..< min($0 + blockSize, signal2.count)]) }

        // 各スレッドで、フーリエ変換とフーリエ逆変換を行う。
        var results = [Float](repeating: 0.0, count: signal1.count)
        let groups = DispatchGroup()
        for i in 0 ..< numThreads {
            groups.enter()
            let block = (signal1Blocks[i], signal2Blocks[i])
            DispatchQueue.global().async {
                // ブロックサイズごとにフーリエ変換された入力信号とフィルタ信号を乗算する。
                var productFFT = zip(self.fft(block.0), self.fft(block.1)).map { $0 * $1 }

                // ブロックサイズごとにフーリエ逆変換を行う。
                let blockResult = self.ifft(&productFFT)

                // ブロック結果を結合する。
                results += blockResult[0 ..< block.0.count]
                groups.leave()
            }
        }
        groups.wait()

        // 出力信号を切り捨てる。
        return results
    }
    
    func ifft(_ x: inout [Float]) -> [Float] {
        // 入力信号のサイズが2の累乗でない場合、補充を行う。
        var n = x.count
        var even = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))
        var odd = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))

        while n % 2 != 0 {
            x.append(0.0)
            n += 1
        }

        // 偶数番目の要素のFFTを計算する。
        for i in 0 ..< even.count {
            even[i] = x[2 * i]
        }
        even = fft(even)

        // 奇数番目の要素のFFTを計算する。
        for i in 0 ..< odd.count {
            odd[i] = x[2 * i + 1]
        }
        odd = fft(odd)

        // 偶数番目の要素と奇数番目の要素を組み合わせて、出力信号を生成する。
        var result = [Float](repeating: 0.0, count: n)
        for k in 0 ..< n / 2 {
            let k0 = 2 * k
            let k1 = 2 * k + 1
            let w_k = cos(-2 * .pi * Float(k) / Float(n)) - sin(-2 * .pi * Float(k) / Float(n))
            result[k0] = even[k] + odd[k] * w_k
            result[k1] = even[k] - odd[k] * w_k
        }

        return result
    }
    
    func fft(_ x: [Float]) -> [Float] {
            // 入力信号のサイズが2の累乗でない場合、補充を行う。
            let n = x.count
            print(n)
            if n == 1 {
                return x
            }
            var even = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))
            var odd = [Float](repeating: 0.0, count: n / 2 + (n % 2 == 1 ? 1 : 0))

            
            // 偶数番目の要素のFFTを計算する。
            for i in 0 ..< even.count {
                even[i] = x[2 * i]
            }
            even = fft(even)
            
            // 奇数番目の要素のFFTを計算する。
            for i in 0 ..< odd.count {
                odd[i] = x[2 * i + 1]
            }
            odd = fft(odd)
            
            // 偶数番目の要素と奇数番目の要素を組み合わせて、出力信号を生成する。
            var result = [Float](repeating: 0.0, count: n)
            for k in 0 ..< n / 2 {
                let k0 = 2 * k
                let k1 = 2 * k + 1
                let w_k = cos(-2 * .pi * Float(k) / Float(n)) - sin(-2 * .pi * Float(k) / Float(n))
                result[k0] = even[k] + odd[k] * w_k
                result[k1] = even[k] - odd[k] * w_k
            }
            
            return result
        }
    
    func convolution(signal1: [Float], signal2: [Float], blockSize: Int) -> [Float] {
        let m = signal1.count
        let n = signal2.count
        let outputLength = m + n - 1
        
        var result = [Float](repeating: 0.0, count: outputLength)
        var signal1Padded = signal1 + [Float](repeating: 0.0, count: outputLength - m)

        var i = 0
        while i < n {
            let blockEnd = min(i + blockSize, n)
            let currentBlockSize = blockEnd - i
            let signal2Block = Array(signal2[i..<i + currentBlockSize])

            // Perform convolution for the current block
            var blockResult = [Float](repeating: 0.0, count: outputLength)
            vDSP_conv(signal1Padded, 1, signal2Block, 1, &blockResult, 1, vDSP_Length(outputLength), vDSP_Length(currentBlockSize))

            // Add the block result to the overall result with overlap
            vDSP_vadd(result, 1, blockResult, 1, &result, 1, vDSP_Length(outputLength))

            i += currentBlockSize
            print("convolution end", i,":",n)
        }

        print("convolution() end", result.count)

        return result
    }

    func overlapAddConvolution(signal1: [Float], signal2: [Float], blockSize: Int) -> [Float] {
        let m = signal1.count
        let n = signal2.count
        let outputLength = m + n - 1

        var result = [Float](repeating: 0.0, count: outputLength)

        // 現在のブロックインデックス
        var index = 0

        while index < m {
            let blockEnd = min(index + blockSize, m)
            let currentBlockSize = blockEnd - index
            var block1 = Array(signal1[index..<index + currentBlockSize])

            // Apply convolution for the current block
            let blockResult = convolution(signal1: block1, signal2: signal2, blockSize: 850)

            // Add the block result to the overall result with overlap
            for j in 0..<currentBlockSize {
                result[index + j] += blockResult[j]
            }

            index += currentBlockSize
            print("block end", index,":",m)
        }

        // Trim the result to the original output length
        let trimmedResult = Array(result.prefix(outputLength))
        print("overlapAddConvolution end", trimmedResult.count)

        return trimmedResult
    }
    
    func inverseConvolution(signal: [Float], kernel: [Float]) -> [Float] {
        let signalLength = signal.count
        let kernelLength = kernel.count
        let outputLength = signalLength + kernelLength - 1
        
        var result = [Float](repeating: 0.0, count: outputLength)
        
        // Apply inverse convolution using Fourier transform
        vDSP_conv(signal, 1, kernel, 1, &result, 1, vDSP_Length(outputLength), vDSP_Length(kernelLength))
        print("inverseConvolution end",result.count)
        
        return result
    }

    //掛け算
    func elementwiseMultiplication(_ array1: [CGFloat], _ array2: [CGFloat]) -> [CGFloat] {
        // 2つの配列の要素数が異なる場合はエラーを処理する必要があります
        guard array1.count == array2.count else {
            fatalError("配列の長さが一致しません")
        }
        
        var result = [CGFloat]()
        
        for i in 0..<array1.count {
            let product = array1[i] * array2[i]
            result.append(product)
        }
        
        return result
    }
    
    //不明な所ここまで
    
    func findPeaks(_ data: [CGFloat]) -> Int? {
        guard !data.isEmpty else {
            return nil // データが空の場合は nil を返すか、エラー処理を追加することができます
        }

        var peakIndices = [Int]()

        for i in 1..<data.count - 1 {
            if data[i] > data[i - 1]{
                peakIndices.append(i)
            }
        }

        if let maxPeakIndex = peakIndices.max() {
            return maxPeakIndex
        } else {
            return nil // ピークが見つからない場合は nil を返すか、エラー処理を追加することができます
        }
    }

    func extractDataAroundPeaks(_ data: [CGFloat], peakIndex: Int, dataPointsCount: Int) -> [CGFloat] {
        let segmentCount = dataPointsCount / 2
        var extractedData = [CGFloat]()
        
        let startIndex = Int(max(0, peakIndex - segmentCount))
        let endIndex = Int(min(data.count - 1, peakIndex + segmentCount))
        
        // ピークの周りのデータを抽出して連結
        if startIndex <= endIndex {
            let segmentData = Array(data[startIndex...endIndex])
            extractedData.append(contentsOf: segmentData)
        }
        
        return extractedData
    }
    
    func extractDataAfterPeak(_ data: [CGFloat], peakIndex: Int, dataPointsCount: Int) -> [CGFloat] {
        var extractedData = [CGFloat]()
        
        let startIndex = peakIndex // ピークの位置から始める
        let endIndex = min(data.count - 1, startIndex + dataPointsCount - 1) // ピークから指定のデータポイント数だけ取得
        
        if startIndex <= endIndex {
            let segmentData = Array(data[startIndex...endIndex])
            extractedData.append(contentsOf: segmentData)
        }
        
        return extractedData
    }
    
    func extractDataAfterPeak2(_ data: [CGFloat], peakIndex: Int, dataPointsCount: Int) -> [CGFloat] {
        var extractedData = [CGFloat]()
            
            // ピークの位置からデータを取得
            let startIndex = peakIndex
            
            // ピークの位置から指定のデータポイント数だけデータを取得（降順で）
            let endIndex = max(0, startIndex - dataPointsCount + 1)
            
            if startIndex >= endIndex {
                // ピークから後ろのデータポイントを降順で抽出
                for i in stride(from: startIndex, through: endIndex, by: -1) {
                    extractedData.append(data[i])
                }
            }
            
            return extractedData
        }


    func performFFT(on data: [CGFloat]) -> [Double] {
            var realPart = [Double](repeating: 0.0, count: data.count)
            var imaginaryPart = [Double](repeating: 0.0, count: data.count)
            
            // Convert CGFloat data to Double
            for (index, value) in data.enumerated() {
                realPart[index] = Double(value)
            }
            
            var splitComplex = DSPDoubleSplitComplex(realp: &realPart, imagp: &imaginaryPart)
            
            let log2n = vDSP_Length(log2(Double(data.count)))
            let setup = vDSP_create_fftsetupD(log2n, Int32(FFT_RADIX2))
            vDSP_fft_zipD(setup!, &splitComplex, 1, log2n, FFTDirection(FFT_FORWARD))
            vDSP_destroy_fftsetupD(setup)
            
            // Calculate magnitudes from real and imaginary parts
            var magnitudes = [Double](repeating: 0.0, count: data.count)
            vDSP_zvmagsD(&splitComplex, 1, &magnitudes, 1, vDSP_Length(data.count))
            
            return magnitudes
        }
}

class GraphView: UIView {
    var dataPoints: [CGFloat] = [] // グラフのデータポイント

    override func draw(_ rect: CGRect) {
        super.draw(rect)

        guard let context = UIGraphicsGetCurrentContext() else { return }

        // 背景をクリア
        context.clear(rect)

        // グラフを描画
        drawGraph(in: context, within: rect)
    }

    private func drawGraph(in context: CGContext, within rect: CGRect) {
        // データポイントの数を取得
        let dataCount = dataPoints.count
        guard dataCount > 1 else { return }

        // グラフの線の色や太さを設定
        context.setStrokeColor(UIColor.blue.cgColor)
        context.setLineWidth(2.0)

        // X軸とY軸のスケールを計算
        let maxX = CGFloat(dataCount - 1)
        let maxY = dataPoints.max() ?? 1.0 // データポイントの最大値を取得
        let xScale = rect.width / maxX
        let yScale = rect.height / maxY

        // パスを初期化
        context.beginPath()

        // データポイントをつなげる線を描画
        for (index, dataPoint) in dataPoints.enumerated() {
            let x = CGFloat(index) * xScale
            let y = rect.height - dataPoint * yScale // グラフが上から下に描画されるため、Y座標を反転

            if index == 0 {
                context.move(to: CGPoint(x: x, y: y))
            } else {
                context.addLine(to: CGPoint(x: x, y: y))
            }
        }

        // パスを描画
        context.strokePath()
    }
}
