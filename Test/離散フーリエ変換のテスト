//
//  ViewController.swift
//  fftconvolveTest
//
//  Created by 吉田成秀 on 2023/11/07.
//

import UIKit
import AVFoundation
import Accelerate
import DGCharts
import MobileCoreServices

class ViewController: UIViewController, UIDocumentPickerDelegate {
    
    /**
     フィールド変数
     - filePath : 音声ファイルの名前
     - music : 音声ファイルを変換した配列
     - reverseMusic : musicを逆配列にしたもの
     - resultConvolution : 畳み込みの結果
     - resultIfftConvolution : ifftの結果
     - chartView : DGChartsのグラフ
     - selectArray : 選択したファイルの[Float]
     - EnvelopeMode : エンベロープするかどうか
     - FileMode : ファイルを選択したかどうか
     */
    
    var filePath: String = "swept_sine"
    var music:[Float] = []
    var reverseMusic:[Float] = []
    var resultConvolution:[Complex64] = []
    var resultIfftConvolution:[Float] = []
    var selectArray:[Float] = []
    var EnvelopeMode:Bool = false
    var FileMode:Bool = false
    
    var chartView: LineChartView!

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // グラフ表示の事前準備
        chartView = LineChartView()
        chartView.frame = CGRect(x: 20, y: 20, width: 300, height: 200) // Set frame as needed
        view.addSubview(chartView)
        print("Create the LineChartView end")
        
        main()
    }
    
    // MARK: - 音声ファイルを取得し、その逆配列をFFTして畳み込んでグラフにするメソッド
    func main(){
        //setter(ミュージックの変換)
        if(FileMode){
            music = selectArray
            reverseMusic = reverseFloatArray(floatArray: selectArray)
            
            if(EnvelopeMode){
                reverseMusic = generateEnvelope(waveform: reverseMusic, samplingRate: 48000, fStart: 10, fEnd: 24000)
                print("エンベロープになりました")
            }
        }else{
            if let floatArray = loadWavAudioFileToCGFloatArray(filePath: filePath) {
                music = floatArray
                reverseMusic = reverseFloatArray(floatArray: floatArray)
                
                if(EnvelopeMode){
                    reverseMusic = generateEnvelope(waveform: reverseMusic, samplingRate: 48000, fStart: 10, fEnd: 24000)
                    print("エンベロープになりました")
                }
            } else {
                print("Failed to load audio file")
            }
        }
        print("ミュージックの変換終了",music[0], music[music.count-1], music.count, reverseMusic[0], reverseMusic.count, reverseMusic[reverseMusic.count-1])

        //gettr(畳み込みの実行と逆フーリエ変換)
        resultConvolution = convolutionFFTBlock(signal1: music, signal2: reverseMusic)
        resultIfftConvolution = inverseFFT(complexSignal: resultConvolution)
        print("畳み込みの実行と逆フーリエ変換終了",resultConvolution[0], resultConvolution.count, resultConvolution[resultConvolution.count-1], resultIfftConvolution[0], resultIfftConvolution.count, resultIfftConvolution[resultIfftConvolution.count-1])
        
        //グラフ化処理
        drawGraph(signal: resultIfftConvolution.map { Double($0) })
        print("グラフ化処理終了")
    }
    
    // MARK: - 以下グラフ作成にまつわるコード群
    func drawGraph(signal: [Double]) {
        // グラフ表示の事前準備
        self.chartView.removeFromSuperview()
        self.chartView = LineChartView()
        self.chartView.frame = CGRect(x: 20, y: 20, width: 300, height: 200) // Set frame as needed
        self.view.addSubview(self.chartView)
        
        // Prepare data for the chart
        var entries: [ChartDataEntry] = []
        for (index, magnitude) in signal.enumerated() {
            let entry = ChartDataEntry(x: Double(index), y: magnitude)
            entries.append(entry)
        }
        
        // Create a data set and a data object for the chart
        let dataSet = LineChartDataSet(entries: entries, label: "FFT Magnitudes")
        dataSet.drawCirclesEnabled = false
        
        // Customize the chart appearance (optional)
        self.chartView.xAxis.labelPosition = .bottom
        self.chartView.rightAxis.enabled = false
        
        // Set the new data for the chart
        let data = LineChartData(dataSet: dataSet)
        self.chartView.data = data
        
        // Notify the chart to update and redraw
        self.chartView.notifyDataSetChanged()
    }
    
    // MARK: - 以下wavを取得し、[Float]に変換するコード群
    
    /**
     wavファイルの名前を指定して[CGFloat]を取得するメソッド
     - parameter String: wavなどの音声ファイルをstringで受け取ります。
     - returns: ファイルを変換した[CGFloat]をconvertCGFloatArrayToFloatArrayで[Float]に変換して返します
    */
    func loadWavAudioFileToCGFloatArray(filePath: String) -> [Float]? {
        guard let wavURL = Bundle.main.url(forResource: filePath, withExtension: "wav") else {
            fatalError("WAVファイルが見つかりません")
        }

        do {
            let audioFile = try AVAudioFile(forReading: wavURL)
            let format = audioFile.processingFormat
            let frameCount = UInt32(audioFile.length)
            
            // サンプルデータを読み込むためのバッファを作成
            let buffer = AVAudioPCMBuffer(pcmFormat: format, frameCapacity: frameCount)
            
            try audioFile.read(into: buffer!)
            
            return Array(UnsafeBufferPointer(start: buffer!.floatChannelData?[0], count: Int(frameCount)))
        } catch {
            fatalError("WAVファイルの読み込みに失敗しました: \(error.localizedDescription)")
        }
        
        return nil
    }
    
    /** 使用例
    if let filePath = "your_audio_file_path.wav" {
        if let floatArray = loadWavAudioFileToCGFloatArray(filePath: filePath) {
            // floatArrayに音声データが格納されています
        } else {
            print("Failed to load audio file")
        }
    }*/

    // MARK: - 信号をいじるコード
    
    /**
     [Float]を逆配列にするメソッド
     - parameter floatArray: [Float]を受け取ります
     - returns: [Float]を逆配列に変換して返します
    */
    func reverseFloatArray(floatArray: [Float]) -> [Float] {
        let reversedArray = Array(floatArray.reversed())
        return reversedArray
    }
    
    /**
     [Float]をエンベロープにするメソッド
     - parameter waveform: 入力
     - parameter samplingRate: サンプリングレート
     - parameter fStart: 開始周波数
     - parameter fEnd: 終了周波数
     - returns: エンベロープに変換して返します
    */
    func generateEnvelope(waveform: [Float], samplingRate: Float, fStart: Float, fEnd: Float) -> [Float] {
        let maxAmplitude = waveform.max() ?? 0.0
        let tMax = Float(waveform.count) / samplingRate

        let scaleFactor = pow(fEnd / fStart, 1.0 / tMax) / tMax

        let envelope = waveform.map { sample in
            return sample * maxAmplitude * scaleFactor
        }

        return envelope
    }
    
    // MARK: - 以下FFTを用いた畳み込みに必要なコード群
    
    //swift言語に複素数が表現できないことを補完するコード
    struct Complex64 {
        var real: Float
        var imag: Float

        init(_ r: Float, _ i: Float) {
            self.real = r
            self.imag = i
        }

        // 自身と他のComplex64を足すための+=演算子の実装
        static func += (lhs: inout Complex64, rhs: Complex64) {
            lhs.real += rhs.real
            lhs.imag += rhs.imag
        }
    }
    
    /**
     高校速フーリエ変換するメソッド
     - parameter signal: wavなどの音声や波形を[Float]型で受け取ります
     - returns: 自作複素数型である[Complex64]に則って戻り値を設定する必要があります
    */
    func FFT(signal: [Float]) -> [Complex64] {
        let log2n = vDSP_Length(log2(Float(signal.count)) + 1)
        let fft = vDSP.FFT(log2n: log2n, radix: .radix2, ofType: DSPSplitComplex.self)!

        var inputReal = [Float](signal)
        var inputImag = [Float](repeating: 0.0, count: signal.count)
        var outputReal = [Float](repeating: 0.0, count: signal.count)
        var outputImag = [Float](repeating: 0.0, count: signal.count)

        inputReal.withUnsafeMutableBufferPointer { inputRealPtr in
            inputImag.withUnsafeMutableBufferPointer { inputImagPtr in
                outputReal.withUnsafeMutableBufferPointer { outputRealPtr in
                    outputImag.withUnsafeMutableBufferPointer { outputImagPtr in
                        let input = DSPSplitComplex(realp: inputRealPtr.baseAddress!, imagp: inputImagPtr.baseAddress!)
                        var output = DSPSplitComplex(realp: outputRealPtr.baseAddress!, imagp: outputImagPtr.baseAddress!)

                        fft.forward(input: input, output: &output)
                    }
                }
            }
        }

        var spectrum = [Complex64](repeating: Complex64(0.0, 0.0), count: signal.count)

        for i in 0 ..< signal.count {
            spectrum[i].real = outputReal[i]
            spectrum[i].imag = outputImag[i]
        }

        return spectrum
    }
    
    /**
     高校速逆フーリエ変換するメソッド
     - parameter signal: wavなどの音声や波形のFFT結果を[Complex64]型で受け取ります
     - returns: 複素数型である[Complex64]を逆算して[Float]で戻します
    */
    func inverseFFT(complexSignal: [Complex64]) -> [Float] {
        let log2n = vDSP_Length(log2(Float(complexSignal.count)))
        let fft = vDSP.FFT(log2n: log2n, radix: .radix2, ofType: DSPSplitComplex.self)!

        var inputReal = [Float](repeating: 0.0, count: complexSignal.count)
        var inputImag = [Float](repeating: 0.0, count: complexSignal.count)
        var outputReal = [Float](repeating: 0.0, count: complexSignal.count)
        var outputImag = [Float](repeating: 0.0, count: complexSignal.count)

        for i in 0..<complexSignal.count {
            inputReal[i] = complexSignal[i].real
            inputImag[i] = complexSignal[i].imag
        }

        inputReal.withUnsafeMutableBufferPointer { inputRealPtr in
            inputImag.withUnsafeMutableBufferPointer { inputImagPtr in
                outputReal.withUnsafeMutableBufferPointer { outputRealPtr in
                    outputImag.withUnsafeMutableBufferPointer { outputImagPtr in
                        let input = DSPSplitComplex(realp: inputRealPtr.baseAddress!, imagp: inputImagPtr.baseAddress!)
                        var output = DSPSplitComplex(realp: outputRealPtr.baseAddress!, imagp: outputImagPtr.baseAddress!)

                        fft.inverse(input: input, output: &output)
                    }
                }
            }
        }

        var signal = [Float](repeating: 0.0, count: complexSignal.count)

        for i in 0..<complexSignal.count {
            signal[i] = outputReal[i]
        }

        return signal
    }

    /**
     バタフライ演算をするメソッド
     - parameter signal1: wavなどの音声や波形を[Float]型で受け取ります
     - parameter signal2: wavなどの音声や波形を逆向きにしたものを[Float]型で受け取ります
     - returns: 計算の過程でfftを行うため、複素数型である[Complex64]で戻します
    */
    func convolutionFFTBlock(signal1: [Float], signal2: [Float]) -> [Complex64] {
        
        // Calculate the required size for FFT (next power of 2)
        let paddedSize = 1 << Int(ceil(log2(Double(signal1.count + signal2.count - 1))))
        
        // Perform FFT on the original signals
        let fft1 = FFT(signal: signal1)
        let fft2 = FFT(signal: signal2)

        // Zero-pad the FFT results to the desired size
        var paddedFFT1 = fft1 + [Complex64](repeating: Complex64(0.0, 0.0), count: paddedSize - fft1.count)
        var paddedFFT2 = fft2 + [Complex64](repeating: Complex64(0.0, 0.0), count: paddedSize - fft2.count)

        // Convolution spectrum
        var convolutionSpectrum = [Complex64](repeating: Complex64(0.0, 0.0), count: paddedSize)
        
        // Convolution spectrum calculation
        for i in 0..<paddedSize {
            convolutionSpectrum[i] = Complex64(paddedFFT1[i].real * paddedFFT2[i].real - paddedFFT1[i].imag * paddedFFT2[i].imag, paddedFFT1[i].real * paddedFFT2[i].imag + paddedFFT1[i].imag * paddedFFT2[i].real)
        }

        // Inverse FFT
        let inverseFFT = convolutionSpectrum.map { $0 }

        return inverseFFT
    }

    // MARK: - 以下@IBAction
    
    //エンベロープにするかどうか
    @IBAction func switchValueChanged(_ sender: UISwitch) {
        if sender.isOn {
            // UISwitchがオンの場合
            EnvelopeMode = true
        } else {
            // UISwitchがオフの場合
            EnvelopeMode = false
        }
    }
    
    //ファイルの選択
    @IBAction func SelectFile(_ sender: Any) {
        let documentPicker = UIDocumentPickerViewController(documentTypes: ["public.audio"], in: .import)
        documentPicker.delegate = self
        documentPicker.allowsMultipleSelection = false // 複数のファイルを選択する場合はtrueに設定

        present(documentPicker, animated: true, completion: nil)
        FileMode = true
    }

    //URLの取得
    func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
        if let selectedFileURL = urls.first {
            let fileManager = FileManager.default
            let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first // ドキュメントディレクトリを取得

            var destinationURL = documentsDirectory?.appendingPathComponent(selectedFileURL.lastPathComponent)

            if fileManager.fileExists(atPath: destinationURL!.path) {
                // 既に同名のファイルが存在する場合、新しい名前を生成するなどの対処を行います
                destinationURL = generateUniqueDestinationURL(for: destinationURL!)
            }

            do {
                // サムネイルの生成を試みる
                try fileManager.copyItem(at: selectedFileURL, to: destinationURL!)

                // サムネイルを保存
                let thumbnailImage = generateThumbnail(for: destinationURL!)
                let thumbnailData = thumbnailImage.pngData()
                try fileManager.createFile(atPath: destinationURL!.appendingPathComponent("thumbnail.png").path, contents: thumbnailData)

                // ファイルを[Float]に変換して保存
                let data = try Data(contentsOf: destinationURL!)
                let samples = data.withUnsafeBytes { (bytes: UnsafePointer<Float>) -> [Float] in
                    var samples = [Float](repeating: 0.0, count: data.count / MemoryLayout<Float>.size)
                    memcpy(&samples, bytes, samples.count * MemoryLayout<Float>.size)
                    return samples
                }

                // 変換した[Float]を保存
                selectArray = samples
                print("Selected file converted to [Float]")
            } catch {
                // エラーが発生した場合の処理
                print("Error: \(error)")
            }
        }
    }

    // サムネイルを生成するメソッド
    func generateThumbnail(for fileURL: URL) -> UIImage {
        // 仮のサムネイル画像のサイズ
        let thumbnailSize = CGSize(width: 100, height: 100)
        
        // グラフィックスコンテキストを作成
        UIGraphicsBeginImageContext(thumbnailSize)
        
        // サムネイルの背景色
        let backgroundColor = UIColor.blue
        
        // 背景色を描画
        backgroundColor.setFill()
        UIRectFill(CGRect(origin: .zero, size: thumbnailSize))
        
        // ここでサムネイルに他の要素（テキスト、画像など）を追加できます
        // 例: ファイル名を表示
        let fileName = fileURL.lastPathComponent as NSString
        let textAttributes: [NSAttributedString.Key: Any] = [
            .font: UIFont.systemFont(ofSize: 14),
            .foregroundColor: UIColor.white
        ]
        let textRect = CGRect(x: 10, y: 10, width: thumbnailSize.width - 20, height: 30)
        fileName.draw(in: textRect, withAttributes: textAttributes)
        
        // グラフィックスコンテキストから画像を取得
        let thumbnailImage = UIGraphicsGetImageFromCurrentImageContext()
        
        // グラフィックスコンテキストを終了
        UIGraphicsEndImageContext()
        
        return thumbnailImage ?? UIImage() // サムネイル画像を返します
    }

    // 重複しない新しいファイル名を生成する関数
    func generateUniqueDestinationURL(for destinationURL: URL) -> URL {
        var newName = "new_" + destinationURL.lastPathComponent
        var newURL = destinationURL.deletingLastPathComponent().appendingPathComponent(newName)

        while FileManager.default.fileExists(atPath: newURL.path) {
            newName = "new_" + newName
            newURL = destinationURL.deletingLastPathComponent().appendingPathComponent(newName)
        }

        return newURL
    }

    func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
        // キャンセルボタンが押された場合の処理
    }
    
    //再描画
    @IBAction func Retry(_ sender: Any) {
        main()
    }
}

