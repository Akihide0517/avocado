#!/usr/bin/env python3
import webbrowser
import sys
from flask import Flask, render_template, url_for
from datetime import datetime
import cgi
from PIL import Image, ImageDraw, ImageFont
import os
import html
import json
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from mpl_toolkits.mplot3d import Axes3D
import random
import firebase_admin
from firebase_admin import credentials, firestore

print("Content-Type: text/html\n")

# Firebase Admin SDKを初期化
# ホームディレクトリのパスを取得
cred = credentials.Certificate("/var/www/hac-it-ai-gcp-sweptsine-firebase-adminsdk-3wkiy-6dd823ffed.json")
firebase_admin.initialize_app(cred)

# Firestoreのインスタンスを作成
db = firestore.client()

# 保存先ディレクトリ
save_directory = "/save"

png_filename = "/"

# 保存ディレクトリが存在しない場合、作成
if not os.path.exists(save_directory):
    os.makedirs(save_directory)

# フォームからデータを取得
form = cgi.FieldStorage()
input_text = html.escape(form.getvalue('input_text', 'Hello from Python!'))  # サニタイズ
selected_collections = html.escape(form.getvalue('selected_collections', ''))  # サニタイズ

# input_textを分割してplaseリストに格納
plase = [item.strip() for item in selected_collections.split(",") if item.strip()]

# 各コレクションを処理
for collection_name in plase:
    # コレクションを取得
    collection_ref = db.collection(collection_name)
    docs = collection_ref.stream()

    # 保存用の辞書を作成
    collection_data = {}

    for doc in docs:
        # ドキュメント内の 'floatArray' フィールドを取得
        doc_data = doc.to_dict()
        if 'floatArray' in doc_data:
            # signal1, signal2, ... として辞書に追加
            collection_data[doc.id] = doc_data['floatArray']

    # 結果をJSONファイルとして保存
    json_file_path = os.path.join(save_directory, f"{collection_name}.json")
    with open(json_file_path, 'w', encoding='utf-8') as json_file:
        json.dump(collection_data, json_file, ensure_ascii=False, indent=4)

    print(f"Data from collection '{collection_name}' has been saved to {json_file_path}")

# 保存先ディレクトリ
save_directory = "/save"

# file_namesを初期化
file_names = []

# saveディレクトリ内のファイルを取得
for file_name in os.listdir(save_directory):
    if file_name.endswith(".json"):  # JSONファイルのみを対象
        file_path = os.path.join(save_directory, file_name)
        file_names.append(file_path)

# JSONファイルを読み込み、結果を格納する関数
def load_json_files(file_names):
    result_dict = {}
    for file_name in file_names:
        with open(file_name, 'r') as file:
            data = json.load(file)
        result_dict[file_name] = data
    return result_dict

# エンベロープ生成関数
def generate_envelope(waveform, sampling_rate, f_start, f_end):
    waveform = waveform[::-1]  # 波形を逆順に
    max_amplitude = np.max(waveform) if len(waveform) > 0 else 0.0
    t_max = len(waveform) / sampling_rate
    scale_factor = pow(f_end / f_start, 1.0 / t_max) / t_max
    envelope = waveform * max_amplitude * scale_factor
    envelope = np.pad(envelope, (24000, 24000), mode='constant')  # 24000個のゼロパディング
    return envelope

# FFT処理を行う関数
def process_signals(json_data, env, sample_rate):
    FFT_list = []
    dates = []
    signal_names = []

    for date, data in json_data.items():
        if isinstance(data, dict):
            for signal_name, signal_data in data.items():
                max_value = np.max(np.abs(signal_data))
                normalized_signal = signal_data / max_value
                abs_max_index = np.argmax(np.abs(normalized_signal))
                cropped_data = normalized_signal[abs_max_index: abs_max_index + 8192]
                convolved_signal = np.convolve(cropped_data, env, mode='same')
                fft_result = np.fft.fft(convolved_signal)
                fft_result_quarter = np.abs(fft_result[:len(fft_result) // 4])
                FFT_list.append(fft_result_quarter)
                dates.append(date)
                signal_names.append(signal_name)
    return FFT_list, dates, signal_names

# 主成分分析と3Dプロットを行う関数
def perform_pca_and_plot(FFT_list, dates, signal_names):
    matrix = np.array(FFT_list)
    scaler = StandardScaler()
    matrix_standardized = scaler.fit_transform(matrix)
    pca = PCA(n_components=3)
    pca_result = pca.fit_transform(matrix_standardized)

    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    colors = ['red', 'green', 'blue', 'magenta', 'yellow', 'cyan', 'orange', 'purple', 'pink', 'brown', 'black', 'white', 'gray', 'lime', 'navy', 'teal', 'violet', 'indigo', 'gold', 'silver', 'coral', 'turquoise', 'maroon', 'olive', 'beige', 'chocolate', 'lavender', 'salmon', 'ivory', 'khaki', 'plum', 'mint', 'peach', 'azure']
    markers = ['o', 's', '^', 'D', 'v']

    for i in range(len(pca_result)):
        if len(file_names) == 0:
            raise ValueError("file_names is empty.")
            color_index = i // int(len(file_names) / 2)
        else:
            # エラー処理またはデフォルト値を設定
            color_index = 1

        marker_index = i % len(markers)
        ax.scatter(pca_result[i, 0], pca_result[i, 1], pca_result[i, 2],
                   color=colors[color_index], marker=markers[marker_index])

    ax.set_title('PCA: FFT Components (3D)')
    ax.set_xlabel('First Principal Component')
    ax.set_ylabel('Second Principal Component')
    ax.set_zlabel('Third Principal Component')
    ax.grid(True)
    user_ip = os.environ.get('REMOTE_ADDR')
    png_filename = f'/var/www/html/pca_3d_scatter_{user_ip}.png'
    plt.savefig(png_filename, format='png')
    plt.show()
    # 開きたいHTMLファイルのパスを指定
    html_file_path = os.path.abspath('/var/www/html/test.html')

    # ブラウザでHTMLファイルを開く
    webbrowser.open(f'file://{html_file_path}')
    <img src="/generated_image.png" alt="Python Image">

# メイン処理
def main():
    json_data = load_json_files(file_names)

    # 波形データを読み込む
    sound_file_path = '/home/g023c1133/swept_sine.wav'
    sample_rate, sound_data = wavfile.read(sound_file_path)
    env = generate_envelope(sound_data.astype(float), sample_rate, 10, 24000)
    FFT_list, dates, signal_names = process_signals(json_data, env, sample_rate)
    perform_pca_and_plot(FFT_list, dates, signal_names)

print("Content-Type: text/html")  # ヘッダー
print()  # ヘッダーとボディの間には空行が必要

if __name__ == "__main__":
    main()


